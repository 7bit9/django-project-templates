# CIR news applications fabfile
# Shamelessly modified from the Chicago Tribune's News Applications fabfile
# We encourage you to copy this floppy (http://www.youtube.com/watch?v=up863eQKGUI)

import os
from fabric.api import *

BASE_DIR = os.path.dirname(os.path.realpath(__file__))

"""
Base configuration
"""
env.project_name = '$(project)'
env.database_password = '$(db_password)'
env.site_media_prefix = "site_media"
env.admin_media_prefix = "admin_media"
env.path = '/home/projects' % env
env.python = 'python2.7'

"""
Environments
"""
def production():
    """
    Work on production environment
    """
    env.settings = 'production'
    env.hosts = ['data.$(production_domain)']
    env.user = 'projects'
    env.s3_bucket = 'media.$(production_domain)'

"""
Running OSX?
"""

def install_homebrew():
    """
    Installs homebrew -- the sane OSX package manager.
    """
    local('/usr/bin/ruby -e "\$(curl -fsSL https://raw.github.com/gist/323731)"')

def setup_osx():
    """
    OSX is going to throw a fit if you try to bootstrap a virtualenv from the
    requirements file without doing the following. Requires homebrew. You can
    either run install_homebrew above or follow the instructions here:
    https://github.com/mxcl/homebrew/wiki/installation
    """
    local('brew install libmemcached')
    local('brew install libevent')

"""
Local bootstrap
"""

def _setup_heroku():
    """
    Performs initial setup on heroku.
    """
    local("git init")
    local("git add .")
    local("git commit -m 'Initial commit'")
    local("heroku create -s cedar %(project_name)s --buildpack http://github.com/cirlabs/heroku-buildpack-geodjango.git" % env)

def bootstrap():
    """
    Local development bootstrap: you should only run this once.
    """
    # Install requirements
    local("pip install -r ./requirements.txt")
    
    # Create database
    create_database(local)
    local("python ./%(project_name)s/manage.py syncdb --noinput" % env)
    
    # Create a heroku app
    _setup_heroku()
    
    # Set virtualenv vars for local dev
    local('echo "export PROJECT_NAME=\"%(project_name)s\"" >> \$WORKON_HOME/%(project_name)s/bin/postactivate' % env)
    local('echo "export DJANGO_SETTINGS_MODULE=\"%(project_name)s.settings\"" >> \$WORKON_HOME/%(project_name)s/bin/postactivate' % env)
    local('echo "export PYTHONPATH=\$PYTHONPATH:%s" >> \$WORKON_HOME/%s/bin/postactivate' % (BASE_DIR, env.project_name))
    local('echo "export PATH=\$PATH:%s" >> \$WORKON_HOME/%s/bin/postactivate' % (BASE_DIR, env.project_name))

"""
Heroku deployment
"""

def _setup_heroku_db():
    """
    Sets up live database connection on Heroku Dyno.
    """
    local('heroku config:add DATABASE_URL=postgres://%(project_name)s:%(database_password)s@data.apps.cironline.org:5432/%(project_name)s' % env)

def deploy_to_heroku():
    local("pip freeze > requirements.txt")
    local("git add .")
    prompt("Type your commit message here:", key='commitmessage')
    local("git commit -m '%(commitmessage)s';" % env)
    local("git push heroku master")
    local("heroku config:add PYTHONPATH=\$PYTHONPATH:/app")
    _setup_heroku_db()

"""
Database setup and deploy
"""

def dump_database(func=local):
    func('pg_dump %s | gzip -c > %s/data/dump.sql.gz' % (env.project_name, BASE_DIR))
    
def create_database(func=run):
    """
    Creates the user and database for this project.
    """
    func('echo "CREATE USER %(project_name)s WITH PASSWORD \'%(database_password)s\';" | psql postgres' % env)
    func('createdb -O %(project_name)s %(project_name)s -T template_postgis' % env)
    
def destroy_database(func=run):
    """
    Destroys the user and database for this project.
    
    Will not cause the fab to fail if they do not exist.
    """
    with settings(warn_only=True):
        func('dropdb %(project_name)s' % env)
        func('dropuser %(project_name)s' % env)

def load_data():
    """
    Loads data from the repository into PostgreSQL.
    """
    run("mkdir %(path)s/data/%(project_name)s" % env)
    local("scp data/dump.sql.gz projects@data.apps.cironline.org:data/%(project_name)s" % env)
    run("gunzip %(path)s/data/%(project_name)s/dump.sql.gz" % env)
    run('psql -q %(project_name)s < %(path)s/data/%(project_name)s/dump.sql' % env)
    
def pgpool_down():
    """
    Stop pgpool so that it won't prevent the database from being rebuilt.
    """
    sudo('/etc/init.d/pgpool stop')
    
def pgpool_up():
    """
    Start pgpool.
    """
    sudo('/etc/init.d/pgpool start')

"""
Static media
"""

def gzip_assets():
    """
    GZips every file in the assets directory and places the new file
    in the gzip directory with the same filename.
    """
    run('cd %(repo_path)s; python gzip_assets.py' % env)

def deploy_to_s3():
    """
    Deploy the latest project site media to S3.
    """
    env.gzip_path = '%(path)s/repository/%(project_name)s/gzip/assets/' % env
    run(('s3cmd -P --add-header=Content-encoding:gzip --guess-mime-type --rexclude-from=%(path)s/repository/s3exclude sync %(gzip_path)s s3://%(s3_bucket)s/%(project_name)s/%(site_media_prefix)s/') % env)